
public class Problem1to10 {

    /*
    Problem 1
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
    Find the sum of all the multiples of 3 or 5 below 1000.
    */
    static void problem1(){
        int answer = 0;

        for (int i = 0; i < 1000; i++) {
            if( (i % 3 == 0) || ( i % 5 == 0 ) )
                answer += i;
        }

        System.out.println(answer);
    }


    /*
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
     */
    static void problem2(){
        int next = 3;
        int first = 1;
        int second = 2;
        int sum = 2;

        while(next < 4000000){
            if(next % 2 == 0)
                sum += next;

            first = second;
            second = next;
            next = first + second;
        }

        System.out.println(sum);
    }


    /*
    Integer factorization
    The prime factors of 13195 are 5, 7, 13 and 29.
    What is the largest prime factor of the number 600851475143 ?
     */

    static void problem3(long number){

        int i = 2;

        while(number != i){
            if(number % i != 0){
                i++;
            } else {
                number = number / i;
            }
        }
        System.out.println(number);
    }

    /*
    A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
    Find the largest palindrome made from the product of two 3-digit numbers.
     */
    static void problem4(){
        for(int i = 100; i < 1000; i++){
                for(int j = 100; j < 1000; j++){
                    checkPoli(i * j) ;
                }
            }
    }

    static void checkPoli(int polindrome) {
        int length = (int)(Math.log10(polindrome)+1);
        char[] arr = String.valueOf(polindrome).toCharArray();

        for(int i = 0; i < arr.length / 2; i++){

            if( arr[i] != arr[length - i - 1] )
                return;

        }
        System.out.println(polindrome);
    }


    /*
    2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
    What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
     */
    static void problem5(int deviders){
        boolean numberFound ;
        int number = deviders;

        do{
            number++;
            numberFound = true;
            for(int i = 1; i <= deviders; i++){
                if(number % i != 0){
                    numberFound = false;
                }
            }
        }while(!numberFound);

        System.out.println(number);
    }


    /*
    На ней абзац текста на английском языке. Нужно скопировать этот текст в новый абзац, слова начинающиеся с “r”,
    без учета регистра, выделить красным и переставить буквы в обратном порядке.
     */
    static void rWordsReverse(){
        String paragraph = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
        String[] words = paragraph.split("\\s+");
        String tmp;

        for (String word: words) {
            if(word.charAt(0) == 'i'){

                StringBuilder str = new StringBuilder(word);
                System.out.println(str.reverse());
            }
        }
    }
}
